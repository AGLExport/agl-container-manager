#include "lxc-runtime.hpp"


#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>


//const char LXC_PATH[] = "/var/lib/lxc/";
const char LXC_PATH[] = "/cross/container-dev/lxc/";


//-----------------------------------------------------------------------------
// public
//-----------------------------------------------------------------------------
CLXCRuntime::CLXCRuntime()
{
	
	
}
//-----------------------------------------------------------------------------
CLXCRuntime::~CLXCRuntime()
{
	
	
}
//-----------------------------------------------------------------------------
//bool CLXCRuntime::SetConfig(CContainerConfig *pconfig)
//{
//	this->m_pContainerConfig = pconfig;
//}
//-----------------------------------------------------------------------------
bool CLXCRuntime::GetGuestList(std::vector< std::string > &guestlist)
{
	return this->m_ContainerConfig.GetGuestList(guestlist);
}
//-----------------------------------------------------------------------------
bool CLXCRuntime::ExecGuestContainer(std::string guest)
{
	if (this->CreateGuestConfig(guest) == false)
	{
		return false;
	}
	
}
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// protected
//-----------------------------------------------------------------------------
bool CLXCRuntime::CreateGuestConfig(std::string guest)
{
	bool result = false;
	CConfigElement *pelem = NULL;
	
	if (this->m_ContainerConfig.GetElementByName(guest, &pelem) == true)
	{
		std::string outfile;
		
		outfile = std::string(LXC_PATH) + guest;
		
		::mkdir(outfile.c_str(), (S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH));
		
		outfile = outfile + std::string("/config");
		std::ofstream cnfout(outfile, std::ios::trunc);
		
		if (cnfout.is_open())
		{
			Json::Value jsonvalue;
			pelem->GetJsonValue(jsonvalue);
			
			this->HeaderOut(cnfout);
			this->BasicConfigOut(cnfout, jsonvalue);
			this->MountConfigOut(cnfout, jsonvalue);
			this->NetworkConfigOut(cnfout, jsonvalue);
			this->ICCConfigOut(cnfout, jsonvalue);
			
			result = true;
		}
	}
	
	return result;
}
//-----------------------------------------------------------------------------
void CLXCRuntime::HeaderOut(std::ofstream &ofs)
{
	ofs << std::string("# LXC config generated by AGL Container Manager") << std::endl;
}
//-----------------------------------------------------------------------------
void CLXCRuntime::BasicConfigOut(std::ofstream &ofs, Json::Value &json)
{
	std::string containername = json["name"].asString();	//must value
	
	ofs << "lxc.uts.name = \"" << containername  << "\"" << std::endl;
	
	if (json["setting"].isObject() == true )
	{
		//have a child value
		Json::Value setting = json["setting"];
		
		if ( setting.isMember("rootfs") == true )
		{
			Json::Value rootfs = setting["rootfs"];
			if (rootfs["path"].asString().length() > 0)
			{
				ofs << "lxc.rootfs.path = dir:" << rootfs["path"].asString() << std::endl;
			}
		}
		
		if ( setting.isMember("lifecycle") == true)
		{
			Json::Value lifecycle = setting["lifecycle"];
			
			if ( lifecycle.isMember("halt") == true )
			{
				if (lifecycle["halt"].asString().length() > 0)
				{
					ofs << "lxc.signal.halt = " << lifecycle["halt"].asString() << std::endl;
				}
			}
			
			if ( lifecycle.isMember("reboot") == true )
			{
				if (lifecycle["reboot"].asString().length() > 0)
				{
					ofs << "lxc.signal.reboot = " << lifecycle["reboot"].asString() << std::endl;
				}
			}
		}
		
		if ( setting.isMember("cap") == true)
		{
			Json::Value cap = setting["cap"];
			
			if ( cap.isMember("drop") == true )
			{
				if (cap["drop"].asString().length() > 0)
				{
					ofs << "lxc.cap.drop = " << cap["drop"].asString() << std::endl;
				}
			}
			
			if ( cap.isMember("keep") == true )
			{
				if (cap["keep"].asString().length() > 0)
				{
					ofs << "lxc.cap.keep = " << cap["keep"].asString() << std::endl;
				}
			}
		}
	}
	
	ofs << "lxc.tty.max = 1" << std::endl;
	ofs << "lxc.pty.max = 1" << std::endl;
}
//-----------------------------------------------------------------------------
void CLXCRuntime::MountConfigOut(std::ofstream &ofs, Json::Value &json)
{
	ofs << std::endl;
	ofs << "# mount settings" << std::endl;
	
	if (json["mount"].isArray() == true )
	{
		//have a child value
		Json::Value mounts = json["mount"];
		
		Json::Value::ArrayIndex count, max;
		max = mounts.size();
		
		std::cout << "max is " << std::to_string(max) << std::endl;
		
		for(count = 0; count < max; count++)
		{
			Json::Value mnt = mounts[count];
			
			// must need parameta
			if ( mnt.isMember("type") && mnt.isMember("from") && mnt.isMember("to") && mnt.isMember("option") )
			{
				ofs << "# " << mnt["type"].asString() << " mount" << std::endl;
				
				ofs << "lxc.mount.entry = " << mnt["from"].asString() << " " << mnt["to"].asString() << " "
					<< mnt["option"].asString() << std::endl;
				
				if (mnt.isMember("test") == true)
				{
					dev_t dev;
					
					if (this->GetDevNum(mnt["test"].asString(), dev) == true)
					{
						//if (major(dev) > 0)
						{
							ofs << "lxc.cgroup.devices.allow = c " << std::to_string(major(dev)) << ":* rwm" << std::endl;
						}
					}
				}
				ofs << std::endl;
			}
			else
			{
				//nop
			}
		}
	}
}
//-----------------------------------------------------------------------------
void CLXCRuntime::NetworkConfigOut(std::ofstream &ofs, Json::Value &json)
{
	
}
//-----------------------------------------------------------------------------
void CLXCRuntime::ICCConfigOut(std::ofstream &ofs, Json::Value &json)
{
	
}
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
bool CLXCRuntime::GetDevNum(std::string node, dev_t &dev)
{
	struct stat sb = {0};
	
	if (::stat(node.c_str(), &sb) < 0)
	{
		return false;
	}
	
	dev = sb.st_dev;
	
	return true;
}
//-----------------------------------------------------------------------------

